BLOCK = { DECLARATION_STATEMENT };

DECLARATION_STATEMENT = [ (IDENTIFIER, "is", EXPRESSION) | ("function", FUNC_NAME, "as", IDENTIFIER, "with", "\n", [ FUNC_ARG , "as", EXPRESSION , { "and" , "\n , FUNC_ARG , "as", EXPRESSION} , "\n" ], "end") | ( "START_BUILD", "\n", { BUILD_STATEMENT }, "END_BUILD" ) ] , "\n" ;

BUILD_STATEMENT = [ ([ "for" , IDENTIFIER, "in", EXPRESSION, ":", EXPRESSION] , PERFORM_STATEMENT) | ( "on" , MONITERING_METRIC, COMPARISON_OPERATOR, EXPRESSION, "in", EXPRESSION, "alert") ], "\n";

PERFORM_STATEMENT = "perform", ( IDENTIFIER | FUNC_NAME ), "with", "\n", [ FUNC_ARG , "as", EXPRESSION , { "and" , "\n , FUNC_ARG , "as", EXPRESSION} , "\n" ], "end";

EXPRESSION = TERM, { ("+" | "-" | "."), TERM } ;

TERM = FACTOR, { ("*" | "/"), FACTOR } ;

FACTOR = NUMBER | STRING | "(", EXPRESSION, ")" | IDENTIFIER | ("+" | "-"), FACTOR;

IDENTIFIER = ( LETTER, { LETTER | DIGIT | "_" } ) | (KNOWN_IDENTIFIERS);

STRING = '"', { LETTER | DIGIT | " " | "." | "," | ":" | ";" | "-" | "_" | "/" | "\\" | "!" | "?" | "@" | "#" | "$" | "%" | "&" | "*" | "(" | ")" | "[" | "]" | "{" | "}" | "<" | ">" | "=" | "+" | "~" | "^" | "`" }, '"' ;

NUMBER = DIGIT, { DIGIT } ;

LETTER = ( a | ... | z | A | ... | Z ) ;

DIGIT = ( 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 0 ) ;

FUNC_NAME = ( "InstanceBuilder" | "SecurityGroupBuilder" );

FUNC_ARG = ( "sg_name" | "sg_description" | "sg_id" | "instance_name" | "ami" | "instance_type" | "ingress_port" | "ingress_protocol" | "ingress_description" | "egress_port" | "egress_protocol" );

MONITERING_METRIC = ( "CPUUtilization" | "NetworkPacketsIn" | "NetworkPacketsOut" | "DiskReadOps" | "DiskWriteOps" );

COMPARISON_OPERATOR = ( ">" | "<" | "<=" | ">=" );